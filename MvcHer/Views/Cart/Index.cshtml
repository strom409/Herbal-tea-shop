@model List<MvcHer.Models.CartItem>
@{
    ViewData["Title"] = "Shopping Cart";
}

<style>
    /* === Cart Modal === */
    .modal-content {
        border-radius: 20px;
        overflow: hidden;
        border: none;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        background: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        padding: 1.5rem;
    }

    .modal-title {
        color: #4a7c35;
        font-weight: 700;
        display: flex;
        align-items: center;
    }

    .modal-body {
        padding: 2rem;
    }

    /* === Cart Items === */
    .cart-container {
        min-height: 300px;
    }

    .cart-item-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        animation: fadeInUp 0.5s ease forwards;
        opacity: 0;
    }

    .cart-item-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
    }

    .cart-item-content {
        display: flex;
        gap: 20px;
    }

    .product-image {
        width: 120px;
        height: 120px;
        object-fit: cover;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .product-details {
        flex: 1;
    }

    .product-name {
        color: #33691e;
        font-weight: 600;
        margin-bottom: 8px;
    }

    .product-description {
        color: #6c757d;
        font-size: 0.9rem;
        margin-bottom: 12px;
    }

    .product-price {
        font-weight: 700;
        color: #558b2f;
        font-size: 1.1rem;
        margin-bottom: 15px;
    }

    /* === Quantity Controls === */
    .quantity-section {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .quantity-label {
        margin-right: 15px;
        color: #6c757d;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
    }

    .quantity-btn {
        width: 32px;
        height: 32px;
        border-radius: 8px;
        background: #8bc34a;
        color: white;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .quantity-btn:hover {
        background: #7cb342;
    }

    .quantity-input {
        width: 50px;
        text-align: center;
        margin: 0 10px;
        border: 1px solid #ced4da;
        border-radius: 8px;
        padding: 5px;
    }

    /* === Remove Button === */
    .remove-btn {
        background: #8BC34A;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 8px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: background 0.3s ease;
        display: inline-flex;
        align-items: center;
    }

    .remove-btn:hover {
        background: #ef5350;
    }

    /* === Order Summary === */
    .order-summary {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        position: sticky;
        top: 20px;
    }

    .summary-header {
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 15px;
        margin-bottom: 15px;
    }

    .summary-title {
        color: #4a7c35;
        font-weight: 700;
        display: flex;
        align-items: center;
        font-size: 1.2rem;
    }

    .summary-content {
        padding: 10px 0;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        color: #495057;
    }

    .summary-row:last-child {
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid #e9ecef;
        font-weight: 700;
        color: #212529;
    }

    /* === Checkout Button === */
    .checkout-btn {
        width: 100%;
        padding: 12px;
        background: #4caf50;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.3s ease;
        margin-top: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .checkout-btn:hover {
        background: #43a047;
    }

    /* === Empty Cart === */
    .empty-cart-section {
        text-align: center;
        padding: 40px 20px;
    }

    .empty-cart-icon {
        font-size: 4rem;
        color: #8bc34a;
        margin-bottom: 20px;
    }

    .empty-cart-title {
        color: #4a7c35;
        margin-bottom: 15px;
    }

    .empty-cart-text {
        color: #6c757d;
        margin-bottom: 25px;
    }

    .start-shopping-btn {
        background: #8bc34a;
        color: white;
        padding: 10px 25px;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 600;
        transition: background 0.3s ease;
        display: inline-flex;
        align-items: center;
    }

    .start-shopping-btn:hover {
        background: #7cb342;
        color: white;
    }

    /* === Animations === */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* === Responsive Adjustments === */
    @@media (max-width: 768px) {
        .cart-item-content {
            flex-direction: column;
        }
        
        .product-image {
            width: 100%;
            height: auto;
            max-height: 200px;
        }
    }
</style>

<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title" id="cartModalLabel">
            <i class="fa fa-shopping-cart me-2"></i>Shopping Cart
        </h5>
    </div>
    <div class="modal-body">
        <div id="cart-items">
            <div class="cart-container">
                @if (Model == null || !Model.Any())
                {
                    <div class="empty-cart-section">
                        <div class="empty-cart-icon">
                            <i class="fas fa-shopping-cart"></i>
                        </div>
                        <h2 class="empty-cart-title">Your Cart is Empty</h2>
                        <p class="empty-cart-text">
                            Discover our premium collection of organic teas<br>
                            and start your wellness journey today!
                        </p>
                        <a asp-controller="Store" asp-action="Index" class="start-shopping-btn">
                            <i class="fas fa-leaf me-2"></i>Start Shopping
                        </a>
                    </div>
                }
                else
                {
                    <div class="row">
                        <!-- Cart Items Column -->
                        <div class="col-lg-8">
                            <div class="cart-items-section">
                                @foreach (var item in Model)
                                {
                                    <div class="cart-item-card" data-product-id="@item.ProductId" style="animation-delay: @(Model.IndexOf(item) * 0.1)">
                                        <div class="cart-item-content">
                                            <img src="@item.Product.ImageUrl" alt="@item.Product.Name" class="product-image">
                                            <div class="product-details">
                                                <h3 class="product-name">@item.Product.Name</h3>
                                                <p class="product-description">@item.Product.Description</p>
                                                <div class="product-price">
                                                    â‚¹@item.Product.Price.ToString("N2")
                                                </div>
                                                <div class="quantity-section">
                                                    <span class="quantity-label">Quantity:</span>
                                                    <div class="quantity-controls">
                                                        <button class="quantity-btn" onclick="updateQuantity(@item.ProductId, @(item.Quantity - 1))">
                                                            <i class="fas fa-minus"></i>
                                                        </button>
                                                        <input type="number" class="quantity-input" value="@item.Quantity"
                                                               onchange="updateQuantity(@item.ProductId, this.value)" min="1">
                                                        <button class="quantity-btn" onclick="updateQuantity(@item.ProductId, @(item.Quantity + 1))">
                                                            <i class="fas fa-plus"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                                <button class="remove-btn" onclick="removeFromCart(@item.ProductId)">
                                                    <i class="fas fa-trash me-2"></i>Remove Item
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Order Summary Column -->
                        <div class="col-lg-4">
                            <div class="order-summary">
                                <div class="summary-header">
                                    <h3 class="summary-title">
                                        <i class="fas fa-receipt me-2"></i>Order Summary
                                    </h3>
                                </div>
                                <div class="summary-content">
                                    <div class="summary-row">
                                        <span>Items (@Model.Sum(c => c.Quantity))</span>
                                        <span>â‚¹@Model.Sum(c => c.Product.Price * c.Quantity).ToString("N2")</span>
                                    </div>
                                    <div class="summary-row">
                                        <span>Shipping</span>
                                        <span style="color: #8BC34A; font-weight: 600;">Free</span>
                                    </div>
                                    <div class="summary-row">
                                        <span>Tax (18% GST)</span>
                                        <span>â‚¹@((Model.Sum(c => c.Product.Price * c.Quantity) * 0.18m).ToString("N2"))</span>
                                    </div>
                                    <div class="summary-row">
                                        <span><strong>Total Amount</strong></span>
                                        <span><strong>â‚¹@((Model.Sum(c => c.Product.Price * c.Quantity) * 1.18m).ToString("N2"))</strong></span>
                                    </div>
                                    <button class="checkout-btn" onclick="proceedToCheckout()">
                                        <i class="fas fa-lock me-2"></i>Secure Checkout
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
<div id="cart-messages" class="position-fixed" style="top: 100px; right: 20px; z-index: 1050;"></div>

<script>
    // Cart functionality with smooth animations
    function updateQuantity(productId, newQuantity) {
        newQuantity = parseInt(newQuantity);
        if (isNaN(newQuantity)) {
            return;
        }

        if (newQuantity < 1) {
            removeFromCart(productId);
            return;
        }

        const card = document.querySelector(`.cart-item-card[data-product-id="${productId}"]`);
        if (card) {
            card.style.opacity = '0.7';
        }

        fetch('/Cart/UpdateCartItem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            },
            body: JSON.stringify({
                productId: productId,
                quantity: newQuantity
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showMessage('Cart updated successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showMessage('Error updating cart: ' + (data.message || 'Unknown error'), 'error');
                if (card) card.style.opacity = '1';
            }
        })
        .catch(error => {
            showMessage('Error updating cart: ' + error.message, 'error');
            if (card) card.style.opacity = '1';
        });
    }

    function removeFromCart(productId) {
        if (!confirm('Are you sure you want to remove this item from your cart?')) {
            return;
        }

        const card = document.querySelector(`.cart-item-card[data-product-id="${productId}"]`);
        if (card) {
            card.style.transform = 'translateX(-100%)';
            card.style.opacity = '0';
            card.style.transition = 'transform 0.4s ease, opacity 0.4s ease';
        }

        fetch('/Cart/RemoveFromCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            },
            body: JSON.stringify({ productId: productId })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showMessage('Item removed from cart!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showMessage('Error removing item: ' + (data.message || 'Unknown error'), 'error');
                if (card) {
                    card.style.transform = '';
                    card.style.opacity = '1';
                }
            }
        })
        .catch(error => {
            showMessage('Error removing item: ' + error.message, 'error');
            if (card) {
                card.style.transform = '';
                card.style.opacity = '1';
            }
        });
    }

    function proceedToCheckout() {
        // First validate cart is not empty
        const cartItems = document.querySelectorAll('.cart-item-card');
        if (cartItems.length === 0) {
            showMessage('Your cart is empty!', 'error');
            return;
        }

        // Check if user is authenticated (you might need to adjust this)
        fetch('/Account/IsAuthenticated')
            .then(response => response.json())
            .then(data => {
                if (data.isAuthenticated) {
                    window.location.href = '/Cart/Checkout';
                } else {
                    showMessage('Please login to proceed to checkout', 'error');
                    window.location.href = '/Account/Login?returnUrl=/Cart';
                }
            })
            .catch(() => {
                window.location.href = '/Cart/Checkout';
            });
    }

    function showMessage(message, type) {
        const container = document.getElementById('cart-messages');
        if (!container) return;

        // Remove any existing messages
        while (container.firstChild) {
            container.removeChild(container.firstChild);
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `alert alert-${type === 'error' ? 'danger' : 'success'} alert-dismissible fade show`;
        messageDiv.style.minWidth = '350px';
        messageDiv.style.borderRadius = '15px';
        messageDiv.style.boxShadow = '0 10px 30px rgba(0,0,0,0.2)';
        messageDiv.innerHTML = `
            <strong>${type === 'success' ? 'âœ“' : 'âœ—'}</strong> ${message}
            <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
        `;

        container.appendChild(messageDiv);

        setTimeout(() => {
            messageDiv.remove();
        }, 5000);
    }

    // Initialize animations and event listeners
    document.addEventListener('DOMContentLoaded', function() {
        // Animate cart items
        const cards = document.querySelectorAll('.cart-item-card');
        cards.forEach((card, index) => {
            card.style.animationDelay = `${index * 0.1}s`;
        });

        // Fix for quantity input changes
        document.querySelectorAll('.quantity-input').forEach(input => {
            input.addEventListener('change', function() {
                const productId = this.closest('.cart-item-card').dataset.productId;
                updateQuantity(productId, this.value);
            });
        });

        // Fix for remove buttons
        document.querySelectorAll('.remove-btn').forEach(button => {
            button.addEventListener('click', function() {
                const productId = this.closest('.cart-item-card').dataset.productId;
                removeFromCart(productId);
            });
        });

        // Fix for checkout button
        document.querySelector('.checkout-btn')?.addEventListener('click', proceedToCheckout);
    });
</script>